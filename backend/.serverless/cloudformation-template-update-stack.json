{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "UserTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "SFSJSUserTable-Dev",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "CognitoUserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "UserPoolName": "SFSJSUserPool-Dev",
        "UsernameAttributes": [
          "email",
          "phone_number"
        ],
        "UsernameConfiguration": {
          "CaseSensitive": false
        },
        "AutoVerifiedAttributes": [
          "email"
        ],
        "Policies": {
          "PasswordPolicy": {
            "MinimumLength": 6,
            "RequireLowercase": true,
            "RequireNumbers": true,
            "RequireSymbols": true,
            "RequireUppercase": true,
            "TemporaryPasswordValidityDays": 7
          }
        }
      }
    },
    "CognitoUserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "ClientName": "Dev-user-pool-client",
        "UserPoolId": {
          "Ref": "CognitoUserPool"
        },
        "ExplicitAuthFlows": [
          "ADMIN_NO_SRP_AUTH"
        ],
        "GenerateSecret": false
      }
    },
    "GraphQlApi": {
      "Type": "AWS::AppSync::GraphQLApi",
      "Properties": {
        "Name": "SFSJSAppsync-Dev",
        "AuthenticationType": "AMAZON_COGNITO_USER_POOLS",
        "AdditionalAuthenticationProviders": [
          {
            "AuthenticationType": "AWS_IAM"
          }
        ],
        "UserPoolConfig": {
          "AwsRegion": "us-east-1",
          "UserPoolId": "us-east-1_etvMs34jK",
          "DefaultAction": "ALLOW"
        },
        "XrayEnabled": false
      }
    },
    "GraphQlSchema": {
      "Type": "AWS::AppSync::GraphQLSchema",
      "Properties": {
        "Definition": "schema {\n  query: Query\n  mutation: Mutation\n}\n\ntype Query {\n  getUser(id: ID!): User!\n  getAllUsers(nextToken: String): [UserConnection]\n}\n\ntype Mutation {\n  createUser(input: CreateUserInput!): User!\n  editUser(input: EditUserInput!): User!\n  deleteUser(id: ID!): User!\n}\n\ntype User {\n  id: ID!\n  username: String!\n  name: String!\n}\n\ntype UserConnection {\n  items: [User]\n  nextToken: String\n}\n\ninput CreateUserInput {\n  id: ID!\n  username: String!\n  name: String!\n}\n\ninput EditUserInput {\n  id: ID!\n  username: String\n  name: String\n}\n\ninput TableBooleanFilterInput {\n  eq: Boolean\n  ne: Boolean\n}\n\ninput TableFloatFilterInput {\n  between: [Float]\n  contains: Float\n  eq: Float\n  ge: Float\n  gt: Float\n  le: Float\n  lt: Float\n  ne: Float\n  notContains: Float\n}\n\ninput TableIDFilterInput {\n  beginsWith: ID\n  between: [ID]\n  contains: ID\n  eq: ID\n  ge: ID\n  gt: ID\n  le: ID\n  lt: ID\n  ne: ID\n  notContains: ID\n}\n\ninput TableIntFilterInput {\n  between: [Int]\n  contains: Int\n  eq: Int\n  ge: Int\n  gt: Int\n  le: Int\n  lt: Int\n  ne: Int\n  notContains: Int\n}\n\ninput TableStringFilterInput {\n  beginsWith: String\n  between: [String]\n  contains: String\n  eq: String\n  ge: String\n  gt: String\n  le: String\n  lt: String\n  ne: String\n  notContains: String\n}",
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        }
      }
    },
    "GraphQlDsUserTableRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "appsync.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "GraphQlDsUserTablePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "dynamodb:DeleteItem",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:UpdateItem",
                    "dynamodb:BatchGetItem",
                    "dynamodb:BatchWriteItem",
                    "dynamodb:ConditionCheckItem"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        ":",
                        [
                          "arn",
                          "aws",
                          "dynamodb",
                          "us-east-1",
                          {
                            "Ref": "AWS::AccountId"
                          },
                          {
                            "Fn::Join": [
                              "/",
                              [
                                "table",
                                "SFSJSUserTable-Dev"
                              ]
                            ]
                          }
                        ]
                      ]
                    },
                    {
                      "Fn::Join": [
                        "/",
                        [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn",
                                "aws",
                                "dynamodb",
                                "us-east-1",
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                {
                                  "Fn::Join": [
                                    "/",
                                    [
                                      "table",
                                      "SFSJSUserTable-Dev"
                                    ]
                                  ]
                                }
                              ]
                            ]
                          },
                          "*"
                        ]
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "GraphQlDsUserTable": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "Name": "UserTable",
        "Type": "AMAZON_DYNAMODB",
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "GraphQlDsUserTableRole",
            "Arn"
          ]
        },
        "DynamoDBConfig": {
          "AwsRegion": "us-east-1",
          "TableName": "SFSJSUserTable-Dev",
          "UseCallerCredentials": false,
          "Versioned": false
        }
      }
    },
    "GraphQlResolverQuerygetUser": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getUser",
        "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"GetItem\",\n    \"key\": {\n        \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id),\n    }\n}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsUserTable",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverQuerygetAllUsers": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getAllUsers",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"Scan\",\n  \"filter\": #if($context.args.filter) $util.transform.toDynamoDBFilterExpression($ctx.args.filter) #else null #end,\n  \"limit\": $util.defaultIfNull($ctx.args.limit, 20),\n  \"nextToken\": $util.toJson($util.defaultIfNullOrEmpty($ctx.args.nextToken, null)),\n}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsUserTable",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverMutationcreateUser": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "createUser",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"PutItem\",\n  \"key\": {\n    \"id\": #if($ctx.args.input.id) $util.dynamodb.toDynamoDBJson($ctx.args.input.id) #else $util.dynamodb.toDynamoDBJson($util.autoId()) #end,\n  },\n  \"attributeValues\": $util.dynamodb.toMapValuesJson($ctx.args.input),\n  \"condition\": {\n    \"expression\": \"attribute_not_exists(#id)\",\n    \"expressionNames\": {\n      \"#id\": \"id\",\n    },\n  },\n}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsUserTable",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverMutationeditUser": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "editUser",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"UpdateItem\",\n  \"key\": {\n    \"id\": #if($ctx.args.input.id) $util.dynamodb.toDynamoDBJson($ctx.args.input.id) #else $util.dynamodb.toDynamoDBJson($ctx.identity.username) #end,\n  },\n\n  ## Set up some space to keep track of things we're updating **\n  #set( $expNames  = {} )\n  #set( $expValues = {} )\n  #set( $expSet = {} )\n  #set( $expAdd = {} )\n  #set( $expRemove = [] )\n\n  ## Iterate through each argument, skipping keys **\n  #foreach( $entry in $util.map.copyAndRemoveAllKeys($ctx.args.input, [\"id\"]).entrySet() )\n    #if( $util.isNull($entry.value) )\n      ## If the argument is set to \"null\", then remove that attribute from the item in DynamoDB **\n\n      #set( $discard = ${expRemove.add(\"#${entry.key}\")} )\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n    #else\n      ## Otherwise set (or update) the attribute on the item in DynamoDB **\n\n      $!{expSet.put(\"#${entry.key}\", \":${entry.key}\")}\n      $!{expNames.put(\"#${entry.key}\", \"${entry.key}\")}\n      $!{expValues.put(\":${entry.key}\", $util.dynamodb.toDynamoDB($entry.value))}\n    #end\n  #end\n\n  ## Start building the update expression, starting with attributes we're going to SET **\n  #set( $expression = \"\" )\n  #if( !${expSet.isEmpty()} )\n    #set( $expression = \"SET\" )\n    #foreach( $entry in $expSet.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} = ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to ADD **\n  #if( !${expAdd.isEmpty()} )\n    #set( $expression = \"${expression} ADD\" )\n    #foreach( $entry in $expAdd.entrySet() )\n      #set( $expression = \"${expression} ${entry.key} ${entry.value}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Continue building the update expression, adding attributes we're going to REMOVE **\n  #if( !${expRemove.isEmpty()} )\n    #set( $expression = \"${expression} REMOVE\" )\n\n    #foreach( $entry in $expRemove )\n      #set( $expression = \"${expression} ${entry}\" )\n      #if ( $foreach.hasNext )\n        #set( $expression = \"${expression},\" )\n      #end\n    #end\n  #end\n\n  ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **\n  \"update\": {\n    \"expression\": \"${expression}\",\n    #if( !${expNames.isEmpty()} )\n      \"expressionNames\": $utils.toJson($expNames),\n    #end\n    #if( !${expValues.isEmpty()} )\n      \"expressionValues\": $utils.toJson($expValues),\n    #end\n  }\n}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsUserTable",
            "Name"
          ]
        }
      }
    },
    "GraphQlResolverMutationdeleteUser": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "GraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "GraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "deleteUser",
        "RequestMappingTemplate": "{\n  \"version\": \"2017-02-28\",\n  \"operation\": \"DeleteItem\",\n  \"key\": {\n    \"id\": $util.dynamodb.toDynamoDBJson($ctx.args.id)\n  },\n}",
        "ResponseMappingTemplate": "$util.toJson($ctx.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "GraphQlDsUserTable",
            "Name"
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "UserPoolId": {
      "Value": {
        "Ref": "CognitoUserPool"
      }
    },
    "UserPoolClientId": {
      "Value": {
        "Ref": "CognitoUserPoolClient"
      }
    },
    "GraphQlApiId": {
      "Value": {
        "Fn::GetAtt": [
          "GraphQlApi",
          "ApiId"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-GraphQlApiId"
        }
      }
    },
    "GraphQlApiUrl": {
      "Value": {
        "Fn::GetAtt": [
          "GraphQlApi",
          "GraphQLUrl"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-GraphQlApiUrl"
        }
      }
    }
  }
}